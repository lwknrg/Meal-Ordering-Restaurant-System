import { useEffect, useState, useMemo } from "react";
import { Button, Spinner, Tooltip } from "flowbite-react";
import { getAllTables } from "../../../services/table/tableService";
import type { TableEntity } from "../../../services/table/tableService";
import BookingModal, { type BookingData } from "./BookingModal";
import ConfirmDialog from "../../../components/common/ConfirmDialogProps";
import {
  createMyReservation,
  getMyReservations,
  getMyReservationByPublicId,
  updateMyReservation,
} from "../../../services/reservation/reservationService";
import type { Reservation } from "../../../services/reservation/reservationService";
import BookedListModal from "./BookedListModal";
import { useNotification } from "../../../components/Notification/NotificationContext";
import { connectWebSocket } from "../../../api/websocketClient";
import {
  useRealtimeUpdate,
  useRealtimeDelete,
} from "../../../api/useRealtimeUpdate";

/** ================================
 *  COMPONENT: TableBooking
 *  M√¥ t·∫£: Qu·∫£n l√Ω giao di·ªán v√† logic ƒë·∫∑t b√†n c·ªßa ng∆∞·ªùi d√πng
 *  ================================ */
export default function TableBooking() {
  /** -------------------------------
   *  STATE MANAGEMENT
   *  ------------------------------- */
  const [tables, setTables] = useState<TableEntity[]>([]);
  const [page] = useState(0);
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [totalPages, setTotalPages] = useState(0);
  const [selectedTable, setSelectedTable] = useState<TableEntity | null>(null);
  const [loading, setLoading] = useState(true);
  const [showBookedList, setShowBookedList] = useState(false);
  const [selectedArea, setSelectedArea] = useState<string>("ALL");
  const [editingReservation, setEditingReservation] =
    useState<Reservation | null>(null);

  type BookingMode = "create" | "edit" | null;
  const [bookingModalState, setBookingModalState] = useState<BookingMode>(null);
  const [showConfirm, setShowConfirm] = useState(false);
  const [targetPublicId, setTargetPublicId] = useState<string | null>(null);

  const [myReservations, setMyReservations] = useState<Reservation[]>([]);
  const activeReservations = useMemo(
    () =>
      myReservations.filter(
        (res) =>
          res.statusName !== "CANCELLED" && res.statusName !== "COMPLETED"
      ),
    [myReservations]
  );

  const [loadingReservations, setLoadingReservations] = useState(false);
  const { notify } = useNotification();

  /** Danh s√°ch ID b√†n m√† user ƒë√£ ƒë·∫∑t */
  const myBookedStatusMap = useMemo(() => {
    const map: Record<number, string> = {};
    myReservations
      .filter(
        (res) =>
          res.statusName !== "CANCELLED" && res.statusName !== "COMPLETED"
      )
      .forEach((res) => {
        (res.tableIds || []).forEach((id) => {
          map[id] = res.statusName; // PENDING ho·∫∑c CONFIRMED
        });
      });
    return map;
  }, [myReservations]);

  /** -------------------------------
   *  DATE TIME LIMIT (ch·ªâ cho ph√©p ƒë·∫∑t t·ª´ th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)
   *  ------------------------------- */
  const now = new Date();
  const minDateTime = now.toISOString().slice(0, 16);

  /** -------------------------------
   *  DATA FETCHING
   *  ------------------------------- */
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      await Promise.all([fetchTables(), fetchMyReservations()]);
      setLoading(false);
    };
    fetchData();
  }, []);

  useEffect(() => {
    const client = connectWebSocket<{ tableId: number; statusId: number }>(
      "/topic/tables",
      (update) => {
        setTables((prev) =>
          prev.map((t) =>
            t.id === update.tableId
              ? {
                  ...t,
                  statusId: update.statusId,
                  statusName: getStatusNameFromId(update.statusId),
                }
              : t
          )
        );
      }
    );

    return () => {
      // g·ªçi async nh∆∞ng kh√¥ng tr·∫£ v·ªÅ Promise cho useEffect
      client.deactivate();
    };
  }, []);

  useRealtimeUpdate<Reservation, string, { reservationPublicId: string }>(
    "/topic/reservations",
    async (id) => {
      console.log("üîÑ Fetching reservation by publicId:", id);
      const res = await getMyReservationByPublicId(id);
      console.log("‚úÖ Fetched reservation:", res);
      if (!res) throw new Error("Reservation not found");
      return res;
    },
    async (data) => {
      console.log("üì° onUpdate triggered with:", data);
      await fetchMyReservations();
      await fetchTables();
      console.log("‚úÖ Refetched reservations and tables");
    },
    (msg) => {
      console.log("üì© WS message received:", msg);
      return msg.reservationPublicId;
    }
  );

  // üßæ Realtime: khi c√≥ b√†n m·ªõi ƒë∆∞·ª£c th√™m
  useRealtimeUpdate<TableEntity, number, { tableId: number }>(
    "/topic/tables/new",
    async (id) => {
      const all = await getAllTables();
      return all.find((t) => t.id === id)!;
    },
    (newTable) => {
      setTables((prev) => {
        // tr√°nh th√™m tr√πng
        if (prev.some((t) => t.id === newTable.id)) return prev;
        return [...prev, newTable];
      });
    },
    (msg) => msg.tableId
  );

  // ‚úèÔ∏è Realtime: khi b√†n ƒë∆∞·ª£c c·∫≠p nh·∫≠t
  useRealtimeUpdate<TableEntity, number, { tableId: number }>(
    "/topic/tables/update",
    async (id) => {
      const all = await getAllTables();
      return all.find((t) => t.id === id)!;
    },
    (updatedTable) => {
      setTables((prev) =>
        prev.map((t) => (t.id === updatedTable.id ? updatedTable : t))
      );
    },
    (msg) => msg.tableId
  );

  // üóëÔ∏è Realtime: khi b√†n b·ªã x√≥a
  useRealtimeDelete<{ tableId: number }>("/topic/tables/delete", (msg) => {
    setTables((prev) => prev.filter((t) => t.id !== msg.tableId));
  });

  /** L·∫•y danh s√°ch b√†n */
  const fetchTables = async () => {
    try {
      const data = await getAllTables();
      setTables(data);
    } catch (error) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch b√†n:", error);
      notify("error", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†n!");
    }
  };

  /** L·∫•y danh s√°ch b√†n ƒë√£ ƒë·∫∑t c·ªßa user */
  const fetchMyReservations = async () => {
    setLoadingReservations(true);
    try {
      const data = await getMyReservations(page, 10);
      setMyReservations(data?.content || []);
      setTotalPages(data?.totalPages ?? 0);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ƒë·∫∑t b√†n:", error);
      notify("error", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·∫∑t b√†n!");
    } finally {
      setLoadingReservations(false);
    }
  };

  const handleEditReservation = async (res: Reservation) => {
    const fullReservation = await getMyReservationByPublicId(res.publicId);
    if (fullReservation) {
      setEditingReservation(fullReservation);
      // ‚úÖ N·∫øu reservation c√≥ tableIds (ho·∫∑c tables)
      if (fullReservation.tableIds && fullReservation.tableIds.length > 0) {
        const firstTableId = fullReservation.tableIds[0]; // ho·∫∑c ch·ªçn nhi·ªÅu b√†n n·∫øu h·ªó tr·ª£ multi
        // N·∫øu b·∫°n c√≥ danh s√°ch t·∫•t c·∫£ b√†n (tables) ·ªü state, c√≥ th·ªÉ t√¨m ra ƒë·ªëi t∆∞·ª£ng
        const table = tables.find((t) => t.id === firstTableId);
        setSelectedTable(table || null);
      }
      setBookingModalState("edit");
    }
  };

  const handleUpdateReservation = async (data: BookingData) => {
    if (!editingReservation) return;

    const payload = {
      reservationTime: data.reservationTime,
      numberOfPeople: parseInt(data.numberOfPeople),
      note: data.note || "",
      tableIds: editingReservation.tableIds, // ph√≤ng khi s·ª≠a nhi·ªÅu b√†n
    };

    try {
      setLoading(true);
      const updated = await updateMyReservation(
        editingReservation.publicId,
        payload
      );

      if (updated) {
        notify("success", "‚úÖ C·∫≠p nh·∫≠t ƒë·∫∑t b√†n th√†nh c√¥ng!");
        await fetchMyReservations();
        setBookingModalState(null);
        setEditingReservation(null);
      } else {
        notify("error", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë·∫∑t b√†n!");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë·∫∑t b√†n:", error);
      notify("error", "C√≥ l·ªói x·∫£y ra khi l∆∞u thay ƒë·ªïi!");
    } finally {
      setLoading(false);
    }
  };

  const handleCancelReservation = (publicId: string) => {
    setTargetPublicId(publicId);
    setShowConfirm(true);
  };

  const handleConfirmCancel = async () => {
    if (!targetPublicId) return;

    setShowConfirm(false);
    setLoading(true);
    try {
      // üîÅ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh CANCELLED
      await updateMyReservation(targetPublicId, { statusName: "CANCELLED" });

      notify("success", "ƒê√£ h·ªßy ƒë·∫∑t b√†n th√†nh c√¥ng!");
      // üîÅ L√†m m·ªõi d·ªØ li·ªáu
      await Promise.all([fetchTables(), fetchMyReservations()]);
    } catch (error) {
      console.error("‚ùå L·ªói khi h·ªßy ƒë·∫∑t b√†n:", error);
      notify("error", "C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë·∫∑t b√†n!");
    } finally {
      setLoading(false);
      setTargetPublicId(null);
    }
  };

  /** -------------------------------
   *  TRANSLATION HELPERS
   *  ------------------------------- */
  const translateLocation = (location: string) =>
    ({
      MAIN_HALL: "S·∫£nh ch√≠nh",
      VIP_ROOM: "Ph√≤ng VIP",
      OUTDOOR: "Ngo√†i tr·ªùi",
      GARDEN: "Khu v∆∞·ªùn",
      PRIVATE_ROOM: "Ph√≤ng ri√™ng",
      BAR_AREA: "Qu·∫ßy bar",
    }[location] || location);

  const translatePosition = (position: string) =>
    ({
      CENTER: "Gi·ªØa s·∫£nh",
      FAMILY: "Gia ƒë√¨nh",
      GOOD_VIEW: "C·∫£nh ƒë·∫πp",
      BAR: "Qu·∫ßy bar",
      VIP: "Khu v·ª±c VIP",
      PERSONAL: "C√° nh√¢n/ri√™ng t∆∞",
    }[position] || position);

  const translateStatus = (status: string) =>
    ({
      AVAILABLE: "C√≤n tr·ªëng",
      OCCUPIED: "ƒêang s·ª≠ d·ª•ng",
      CONFIRMED: "ƒê√£ duy·ªát",
      PENDING: "ƒêang ch·ªù duy·ªát",
      CANCELLED: "ƒê√£ h·ªßy",
    }[status] || status);

  /** -------------------------------
   *  EVENT HANDLERS
   *  ------------------------------- */

  /** M·ªü modal ƒë·∫∑t b√†n */
  const handleBookTable = (table: TableEntity) => {
    setSelectedTable(table);
    setBookingModalState("create");
  };

  /** X√°c nh·∫≠n ƒë·∫∑t b√†n */
  const handleConfirmBooking = async (data: BookingData) => {
    if (!selectedTable) return;

    const payload = {
      reservationTime: data.reservationTime,
      numberOfPeople: parseInt(data.numberOfPeople),
      note: data.note || "",
      tableIds: [selectedTable.id],
    };

    try {
      setLoading(true);
      const response = await createMyReservation(payload);

      if (response) {
        notify(
          "success",
          `ƒê√£ ƒë·∫∑t b√†n ${selectedTable.name} th√†nh c√¥ng v√†o l√∫c ${data.reservationTime}!`
        );
        setBookingModalState(null);
        await fetchMyReservations();
      } else {
        notify("error", "Kh√¥ng th·ªÉ ƒë·∫∑t b√†n, vui l√≤ng th·ª≠ l·∫°i!");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ªçi API ƒë·∫∑t b√†n:", error);
      notify("error", "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t b√†n!");
    } finally {
      setLoading(false);
    }
  };

  /** -------------------------------
   *  DERIVED DATA (FILTER / COUNT)
   *  ------------------------------- */
  const filteredTables =
    selectedArea === "ALL"
      ? tables
      : tables.filter((t) => t.locationName === selectedArea);

  const availableCount = tables.filter(
    (t) => t.statusName === "AVAILABLE"
  ).length;

  const bookedCount = tables.filter(
    (t) =>
      t.statusName === "PENDING" ||
      t.statusName === "CONFIRMED" ||
      t.statusName === "OCCUPIED"
  ).length;

  const areas = ["ALL", ...new Set(tables.map((t) => t.locationName))];

  /** -------------------------------
   *  RENDER UI
   *  ------------------------------- */
  return (
    <section className="min-h-screen bg-stone-50 py-12 px-4 sm:px-6 md:px-8">
      <div className="max-w-screen-xl mx-auto bg-white p-8 md:p-10 shadow-lg rounded-xl">
        {/* === HEADER === */}
        <header className="mb-8 border-b pb-3">
          <h1 className="text-3xl font-bold text-gray-800 mb-6">ƒê·∫∑t b√†n</h1>

          {loading ? (
            <div className="flex justify-center items-center min-h-[50vh]">
              <Spinner size="xl" color="warning" />
            </div>
          ) : (
            <>
              {/* B·ªô l·ªçc khu v·ª±c */}
              <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
                {/* Khu v·ª±c */}
                <div className="flex gap-2 flex-wrap">
                  {areas.map((area) => (
                    <Button
                      key={area}
                      color={selectedArea === area ? "yellow" : "blue"}
                      size="sm"
                      onClick={() => setSelectedArea(area)}>
                      {area === "ALL"
                        ? "T·∫•t c·∫£ khu v·ª±c"
                        : translateLocation(area)}
                    </Button>
                  ))}
                </div>

                {/* B·ªô ƒë·∫øm + n√∫t xem danh s√°ch */}
                <div className="flex gap-4 items-center">
                  <div className="text-sm flex gap-4 p-2 rounded-lg bg-gray-50 border">
                    <p>
                      Tr·ªëng:{" "}
                      <span className="font-bold text-green-600">
                        {availableCount}
                      </span>
                    </p>
                    <p>
                      ƒê√£ ƒë·∫∑t:{" "}
                      <span className="font-bold text-red-600">
                        {bookedCount}
                      </span>
                    </p>
                    <p>
                      T·ªïng: <span className="font-bold">{tables.length}</span>
                    </p>
                  </div>
                  <Button
                    color="yellow"
                    size="sm"
                    onClick={() => {
                      setShowBookedList(true);
                      fetchMyReservations();
                    }}>
                    Xem b√†n ƒë√£ ƒë·∫∑t
                  </Button>
                </div>
              </div>

              {/* Ch√∫ th√≠ch */}
              <div className="mt-4 flex flex-wrap gap-4 text-sm text-gray-700 items-center">
                <span className="font-semibold mr-2">Ch√∫ th√≠ch:</span>
                <Legend color="green" label="C√≤n tr·ªëng" />
                <Legend color="red" label="ƒê√£ ƒë∆∞·ª£c ƒë·∫∑t" />
                <Legend color="yellow" label="B√†n ƒëang ch·ªù duy·ªát" />
                <Legend color="blue" label="B√†n c·ªßa t√¥i" />
              </div>
            </>
          )}
        </header>

        {/* === DANH S√ÅCH B√ÄN === */}
        {!loading && (
          <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 xl:grid-cols-8 gap-4">
            {filteredTables.map((table) => {
              const myStatus = myBookedStatusMap[table.id];
              const isMyBooked = !!myStatus;
              const isOtherBooked =
                !isMyBooked &&
                ["PENDING", "CONFIRMED", "OCCUPIED"].includes(table.statusName);

              const { colorClass, statusText } = getTableStatusClass(
                table,
                myStatus, // truy·ªÅn status thay v√¨ true/false
                isOtherBooked,
                translateStatus
              );

              return (
                <Tooltip
                  key={table.id}
                  content={
                    <div className="text-left space-y-1 p-1">
                      <p className="font-bold">{table.name}</p>
                      <p className="text-sm">S·ª©c ch·ª©a: {table.capacity}</p>
                      <p className="text-sm">
                        Khu v·ª±c: {translateLocation(table.locationName)}
                      </p>
                      <p className="text-sm">
                        V·ªã tr√≠: {translatePosition(table.positionName)}
                      </p>
                      <p className="text-sm">Tr·∫°ng th√°i: {statusText}</p>
                    </div>
                  }>
                  <button
                    disabled={
                      isMyBooked ||
                      isOtherBooked ||
                      table.statusName !== "AVAILABLE"
                    }
                    onClick={() => handleBookTable(table)}
                    className={`p-4 rounded-lg border-2 text-center shadow-md transition transform hover:scale-105 ${colorClass}`}>
                    <p className="font-bold text-lg">{table.shortName}</p>
                    <p className="text-sm font-medium">{table.capacity} ch·ªó</p>
                    <p className="text-xs mt-1 opacity-80">
                      {translateLocation(table.locationName)}
                    </p>
                  </button>
                </Tooltip>
              );
            })}
          </div>
        )}

        {/* === MODAL ƒê·∫∂T B√ÄN / C·∫¨P NH·∫¨T === */}
        <BookingModal
          table={selectedTable}
          show={bookingModalState !== null}
          minDateTime={minDateTime}
          onClose={() => {
            setBookingModalState(null);
            setEditingReservation(null);
          }}
          onConfirm={handleConfirmBooking}
          onConfirmEdit={handleUpdateReservation}
          existingReservation={editingReservation}
          mode={bookingModalState === "edit" ? "edit" : "create"}
        />

        {/* === MODAL DANH S√ÅCH B√ÄN ƒê√É ƒê·∫∂T === */}
        <BookedListModal
          show={showBookedList}
          onClose={() => setShowBookedList(false)}
          reservations={activeReservations}
          tables={tables}
          loading={loadingReservations}
          onEdit={handleEditReservation}
          onCancel={handleCancelReservation}
          translateStatus={translateStatus}
        />
      </div>
      {/* === CONFIRM DIALOG === */}
      <ConfirmDialog
        open={showConfirm}
        title="X√°c nh·∫≠n h·ªßy ƒë·∫∑t b√†n"
        message="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t b√†n n√†y kh√¥ng?"
        confirmText="ƒê·ªìng √Ω"
        cancelText="Tho√°t"
        onConfirm={handleConfirmCancel}
        onCancel={() => setShowConfirm(false)}
      />
    </section>
  );
}

/** -------------------------------
 *  SUB COMPONENTS & HELPERS
 *  ------------------------------- */

/** Ch√∫ th√≠ch m√†u */
function Legend({ color, label }: { color: string; label: string }) {
  const colorMap: Record<string, string> = {
    green: "bg-green-100 border-green-300",
    red: "bg-red-200 border-red-400",
    blue: "bg-blue-200 border-blue-400",
    yellow: "bg-yellow-200 border-yellow-400",
  };
  return (
    <div className="flex items-center gap-1">
      <span className={`w-4 h-4 rounded-full border ${colorMap[color]}`}></span>
      <span>{label}</span>
    </div>
  );
}

/** Helper x√°c ƒë·ªãnh class & status text theo tr·∫°ng th√°i b√†n */
function getTableStatusClass(
  table: TableEntity,
  myStatus: string | undefined, // PENDING / CONFIRMED / undefined
  isOtherBooked: boolean,
  translateStatus: (s: string) => string
) {
  if (myStatus === "CONFIRMED") {
    return {
      colorClass:
        "bg-blue-100 border-blue-400 text-blue-800 cursor-not-allowed",
      statusText: "B·∫°n ƒë√£ ƒë·∫∑t b√†n (ƒê√£ duy·ªát)",
    };
  }

  if (myStatus === "PENDING") {
    return {
      colorClass:
        "bg-yellow-200 border-yellow-400 text-yellow-800 cursor-not-allowed",
      statusText: "B·∫°n ƒë√£ ƒë·∫∑t b√†n (ƒêang ch·ªù duy·ªát)",
    };
  }

  if (isOtherBooked) {
    return {
      colorClass: "bg-red-200 border-red-400 text-gray-600 cursor-not-allowed",
      statusText: "ƒê√£ c√≥ ng∆∞·ªùi ƒë·∫∑t",
    };
  }

  if (table.statusName === "AVAILABLE") {
    return {
      colorClass:
        "bg-green-100 border-green-300 hover:bg-green-200 text-green-800 hover:shadow-md",
      statusText: "C√≤n tr·ªëng",
    };
  }

  return {
    colorClass: "bg-gray-200 border-gray-300 text-gray-500 cursor-not-allowed",
    statusText: translateStatus(table.statusName),
  };
}

function getStatusNameFromId(statusId: number) {
  switch (statusId) {
    case 11:
      return "AVAILABLE";
    case 12:
      return "OCCUPIED";
    default:
      return "AVAILABLE";
  }
}
